{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jennifertwist/server/html/2020-sept-DreamTeamSocial-ui/src/components/timeline/timeline.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { NavBar } from \"../navbar\";\nimport { Branding } from \"../branding\";\nimport { UserInfo } from \"../userInfo\";\nimport axios from \"axios\";\nimport './timeline.css';\nexport default class Timeline extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkLoginStatus = async () => {\n      return axios({\n        method: \"GET\",\n        withCredentials: true,\n        url: \"http://localhost:3001/user/loggedIn\"\n      }).then(response => {\n        return response.data;\n      }).catch(err => {\n        this.props.history.push('/');\n      });\n    };\n\n    this.getUserProfile = () => {\n      axios({\n        method: \"GET\",\n        withCredentials: true,\n        url: \"http://localhost:3001/user/\" + this.state.loggedInUser\n      }).then(response => {\n        if (response.data.success) {\n          this.setState({\n            UserProfile: response.data.info\n          });\n        } else {\n          this.setState({\n            UserProfile: {\n              username: 'error could not find user',\n              bio: ''\n            }\n          });\n        }\n      }).catch(err => {\n        this.props.history.push('/profile/' + this.state.loggedInUser);\n      });\n    };\n\n    this.getTilPosts = async () => {\n      return axios({\n        method: \"GET\",\n        withCredentials: true,\n        url: \"http://localhost:3001/til/\"\n      }).then(response => {\n        if (response.data.success) {\n          this.setState({\n            userTils: response.data.info\n          });\n        } else {\n          this.setState({\n            userTils: 'Nothing to see here'\n          });\n        }\n      }).catch(err => {\n        this.setState({\n          databaseError: 'Sorry your TILs were not retrieved.'\n        });\n      });\n    };\n\n    this.state = {\n      url: props.match.params.user,\n      loggedInUser: false,\n      userTils: [],\n      UserProfile: {\n        username: '',\n        bio: ''\n      },\n      loggedInUserProfile: false,\n      databaseError: ''\n    };\n  }\n\n  async componentDidMount() {\n    const response = await this.checkLoginStatus();\n\n    if (response.success) {\n      this.setState({\n        loggedInUser: response.info.username,\n        responsedata: true\n      });\n      this.getUserProfile(this.state.url);\n      await this.getTilPosts();\n\n      if (this.state.loggedInUser === this.state.url) {\n        this.setState({\n          loggedInUserProfile: true\n        });\n      } else {\n        this.setState({\n          loggedInUserProfile: false\n        });\n      }\n    } else {\n      this.props.history.push('/');\n    }\n  }\n\n  formatDate(date) {\n    const splitTimestamp = date.split(/[T.]/);\n    const dateOfTil = splitTimestamp[0];\n    let timeOfTil = splitTimestamp[1];\n    timeOfTil = timeOfTil.substring(0, timeOfTil.length - 3);\n    return dateOfTil + ' at ' + timeOfTil;\n  }\n\n  displayTILs() {\n    const userTils = this.state.userTils;\n    userTils.reverse();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: userTils.map((post, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"til_form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_til_titles\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Posted by: \", post.username, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 58\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Posted at: \", this.formatDate(post.createdAt)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"til_post_content\",\n          children: post.tilPost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this))\n    }, void 0, false);\n  }\n\n  databaseErrorMessage() {\n    if (this.state.databaseError) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: this.state.databaseError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  render() {\n    if (this.state.responsedata) {\n      if (this.state.loggedInUser) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid px-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row top_bar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-12 col-md-12 col-xl-12 branding\",\n              children: /*#__PURE__*/_jsxDEV(Branding, {\n                className: \"img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row page_content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-12 col-md-3 user_info\",\n              children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(UserInfo, {\n                bio: this.state.UserProfile.bio,\n                username: this.state.UserProfile.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-12 col-md-9 til_container\",\n              children: this.displayTILs()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 22\n      }, this); // add loading gif if we get to it but this is barely noticable anyway\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifertwist/server/html/2020-sept-DreamTeamSocial-ui/src/components/timeline/timeline.js"],"names":["React","Component","Redirect","NavBar","Branding","UserInfo","axios","Timeline","constructor","props","checkLoginStatus","method","withCredentials","url","then","response","data","catch","err","history","push","getUserProfile","state","loggedInUser","success","setState","UserProfile","info","username","bio","getTilPosts","userTils","databaseError","match","params","user","loggedInUserProfile","componentDidMount","responsedata","formatDate","date","splitTimestamp","split","dateOfTil","timeOfTil","substring","length","displayTILs","reverse","map","post","i","createdAt","tilPost","databaseErrorMessage","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {NavBar} from \"../navbar\";\nimport {Branding} from \"../branding\";\nimport {UserInfo} from \"../userInfo\";\nimport axios from \"axios\";\nimport './timeline.css';\n\n\nexport default class Timeline extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {url: props.match.params.user,\n            loggedInUser: false,\n            userTils: [],\n            UserProfile: {\n                username: '',\n                bio: ''\n            },\n            loggedInUserProfile: false,\n            databaseError: ''\n        };\n    }\n\n    checkLoginStatus = async () => {\n        return axios({\n            method: \"GET\",\n            withCredentials: true,\n            url: \"http://localhost:3001/user/loggedIn\"\n        }).then( response => {\n            return response.data\n        }).catch( err => {\n            this.props.history.push('/');\n        })\n    }\n\n    getUserProfile = () => {\n        axios({\n            method: \"GET\",\n            withCredentials: true,\n            url: \"http://localhost:3001/user/\" + this.state.loggedInUser\n        }).then( response => {\n            if (response.data.success) {\n                this.setState({UserProfile: response.data.info})\n            } else {\n                this.setState({UserProfile: {username: 'error could not find user', bio: ''}})\n            }\n        }).catch( err => {\n            this.props.history.push('/profile/' + this.state.loggedInUser);\n        })\n    }\n\n    async componentDidMount() {\n        const response =  await this.checkLoginStatus();\n        if (response.success) {\n            this.setState({loggedInUser: response.info.username, responsedata: true});\n            this.getUserProfile(this.state.url)\n            await this.getTilPosts()\n            if (this.state.loggedInUser === this.state.url) {\n                this.setState({loggedInUserProfile: true})\n            } else {\n                this.setState({loggedInUserProfile: false})\n            }\n        } else {\n            this.props.history.push('/');\n        }\n    }\n\n    getTilPosts = async () => {\n        return axios({\n            method: \"GET\",\n            withCredentials: true,\n            url: \"http://localhost:3001/til/\"\n        }).then( response => {\n            if(response.data.success){\n                this.setState({userTils: response.data.info})\n            } else {\n                this.setState({userTils: 'Nothing to see here'})\n            }\n        }).catch( err => {\n            this.setState({databaseError: 'Sorry your TILs were not retrieved.'})\n        })\n    }\n\n    formatDate(date) {\n        const splitTimestamp = date.split(/[T.]/);\n        const dateOfTil = splitTimestamp[0];\n        let timeOfTil = splitTimestamp[1];\n        timeOfTil = timeOfTil.substring(0, timeOfTil.length-3)\n        return dateOfTil + ' at ' + timeOfTil\n    }\n\n    displayTILs() {\n        const userTils = this.state.userTils;\n        userTils.reverse()\n        return (\n            <>\n                {userTils.map((post,i) => (\n                    <div key={i} className=\"til_form\">\n                        <div className=\"flex_til_titles\"><p>Posted by: {post.username} </p>\n                            <p>Posted at: {this.formatDate(post.createdAt)}</p>\n                        </div>\n                        <p className=\"til_post_content\">{post.tilPost}</p>\n                    </div>)\n                )}\n            </>\n        )\n    }\n\n    databaseErrorMessage() {\n        if(this.state.databaseError) {\n            return <p className='error'>{this.state.databaseError}</p>\n        }\n    }\n\n    render() {\n\n        if (this.state.responsedata)\n            if (this.state.loggedInUser) {\n                return (\n                    <div className=\"container-fluid px-0\">\n                        <div className=\"row top_bar\">\n                            <div className=\"col-sm-12 col-md-12 col-xl-12 branding\">\n                                <Branding className=\"img\"/>\n                            </div>\n                        </div>\n                        <div className=\"row page_content\">\n                            <div className=\"col-sm-12 col-md-3 user_info\">\n                                <NavBar />\n                                <UserInfo bio={this.state.UserProfile.bio} username={this.state.UserProfile.username}/>\n                            </div>\n                            <div className=\"col-sm-12 col-md-9 til_container\">\n                                {this.displayTILs()}\n                            </div>\n                        </div>\n                    </div>\n                )\n            } else {\n                return (<Redirect to='/'/>)\n            }\n        else {\n            return ( <div>Loading</div>) // add loading gif if we get to it but this is barely noticable anyway\n        }\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}